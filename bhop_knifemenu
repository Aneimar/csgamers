#include <amxmodx>
#include <engine> 
#include <vault>
#include <fun>

#define PLUGIN "Knife Mod"
#define VERSION "1.0" 
#define AUTHOR "spunko"

new knife_model[33] 
new g_Menu

new CVAR_HIGHSPEED
new CVAR_NORMSPEED
new CVAR_LOWGRAV
new CVAR_NORMGRAV

#define NTF		"a"
#define NTRF(%1)	(get_user_flags(%1)&read_flags(NTF))
#define NFOF		"e"
#define NFORF(%1)	(get_user_flags(%1)&read_flags(NFOF))
#define NFIF		"l"
#define NFIRF(%1)	(get_user_flags(%1)&read_flags(NFIF))

enum _:KM
{
	VM[32],
	PM[32]
}
new const KMS[][KM]=
{
	{"models/v_knife.mdl","models/p_knife.mdl"},//toate sunt in ordine ca-n meniu, aici ai modelu pentru 1 cutit din meniu, cel pro, daca nu ai un model cu p_ lasi gol la el adica ""
	
	{"models/v_knife.mdl","models/p_knife.mdl"},
	
	{"models/v_knife.mdl","models/p_knife.mdl"},
	
	{"models/v_knife.mdl","models/p_knife.mdl"},
	
	{"models/v_knife.mdl","models/p_knife.mdl"}
}

public plugin_init() { 
	register_plugin(PLUGIN, VERSION, AUTHOR) 
	
	register_event("CurWeapon","CurWeapon","be","1=1") 
	
	g_Menu = register_menuid("Knife Mod")
	register_menucmd(g_Menu, 1023, "knifemenu")
	
	register_clcmd("say /knife", "display_knife")
	
	CVAR_HIGHSPEED = register_cvar("km_highspeed","600.0")
	CVAR_NORMSPEED = register_cvar("km_normspeed","250.0")
	CVAR_LOWGRAV = register_cvar("km_lowgravity" , "400.0")
	CVAR_NORMGRAV = get_cvar_pointer("sv_gravity")
	
	set_task(480.0, "kmodmsg", 0, _, _, "b")
}

public plugin_precache() { 
	for(new evo; evo < sizeof(KMS); evo++)
	{
		precache_model(KMS[evo][VM])
		if(strlen(KMS[evo][PM]))	precache_model(KMS[evo][PM])
	}
}

public kmodmsg()	client_print(0,print_chat,"[AMXX] Type /knife to change your knife skins")

public client_authorized(id)	LoadData(id)

public display_knife(id) {
	new menuBody[512]
	add(menuBody, 511, "\rKnife Mod\w^n^n")
	
	add(menuBody, 511, "1. PRO Knife (Default knife, fara nimic special)\w^n")
	add(menuBody, 511, "2. Butcher (Low Gravity, 400)\w^n")
	
	if(NTRF(id))	add(menuBody, 511, "3. VIP Knife (Low Gravity, 400)\w^n")
	else	add(menuBody, 511, "\r3. VIP Knife (Low Gravity, 400)\w^n")
	if(NFORF(id))	add(menuBody, 511, "4. STAFF Knife (Low Gravity, 400)\w^n")
	else	add(menuBody, 511, "\r4. STAFF Knife (Low Gravity, 400)\w^n")
	if(NFIRF(id))	add(menuBody, 511, "5. 1337's Knife (Low Gravity 400, Speed 600)\w^n^n")
	else	add(menuBody, 511, "\r5. 1337's Knife (Low Gravity 400, Speed 600)\w^n^n")
	
	add(menuBody, 511, "0. Exit^n")
	
	new keys = ( 1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<9 )
	show_menu(id, keys, menuBody, -1, "Knife Mod")
}
public knifemenu(id, key) {
	if(key<0||key==9)	return
	if(key==2&&!NTRF(id))	return
	if(key==3&&!NFORF(id))	return
	if(key==4&&!NFIRF(id))	return
	
	knife_model[id] = key
	SaveData(id)
	
	if ( get_user_weapon(id) != CSW_KNIFE )
	{
		if(!user_has_weapon(id,CSW_KNIFE))	give_item(id,"weapon_knife")
		engclient_cmd(id,"weapon_knife")
	}
	entity_set_string(id, EV_SZ_viewmodel, KMS[key][VM])
	if(strlen(KMS[key][PM]))	entity_set_string(id, EV_SZ_weaponmodel, KMS[key][PM])
} 

public CurWeapon(id)
{
	if(!is_user_alive(id))	return
	new Weapon = read_data(2)
	if(Weapon != CSW_KNIFE)	return
	
	// Set Knife Model
	knifemenu(id, knife_model[id])
	
	new Float:Gravity = (((knife_model[id] == 1||knife_model[id] == 2||knife_model[id] == 3||knife_model[id] == 4)&&Weapon==CSW_KNIFE)? get_pcvar_float(CVAR_LOWGRAV) : get_pcvar_float(CVAR_NORMGRAV)) / 800.0//ssss
	set_user_gravity(id , Gravity)
	
	// Speed
	new Float:Speed=((knife_model[id] == 4&&Weapon==CSW_KNIFE)?get_pcvar_float(CVAR_HIGHSPEED):get_pcvar_float(CVAR_NORMSPEED))
	set_user_maxspeed(id, Speed)
}

SaveData(id)
{ 
	new authid[32]
	get_user_authid(id, authid, 31)
	new vaultkey[64]
	new vaultdata[64]
	format(vaultkey, 63, "KMOD_%s", authid)
	format(vaultdata, 63, "%d", knife_model[id])
	set_vaultdata(vaultkey, vaultdata)
}
LoadData(id) 
{ 
	new authid[32] 
	get_user_authid(id,authid,31)
	new vaultkey[64], vaultdata[64]
	format(vaultkey, 63, "KMOD_%s", authid)
	get_vaultdata(vaultkey, vaultdata, 63)
	knife_model[id] = str_to_num(vaultdata)
} 
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
