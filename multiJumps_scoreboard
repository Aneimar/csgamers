#include <amxmodx>
#include <cstrike>
#include <amxmisc>
#include <engine>
 
#define VIP_FLAG ADMIN_LEVEL_H 
#define VIP ADMIN_LEVEL_H 
 
new amx_adminvip
new jumpnum[33] = 0
new bool:dojump[33] = false
new cvar_vip_jumps

public plugin_init()
{
        register_plugin("VIP TAB SI MULTI JUMPS", "1.1", "hleV")
 
        amx_adminvip = register_cvar("amx_adminvip", "1")
        cvar_vip_jumps = register_cvar("vip_max_jumps", "1")
 
        register_event("HLTV", "newRound", "a", "1=0", "2=0")

}


public client_PreThink(id)
{
	if(!is_user_alive(id))
	{
		return PLUGIN_HANDLED;
	}
	
	new nbut = get_user_button(id)
	new obut = get_user_oldbutton(id)
	
	if((nbut & IN_JUMP) && !(get_entity_flags(id) & FL_ONGROUND) && !(obut & IN_JUMP))
	{
		if(get_user_flags(id) & VIP_FLAG)
		{
			if(jumpnum[id] < get_pcvar_num(cvar_vip_jumps))
			{
				dojump[id] = true
				jumpnum[id]++
				return PLUGIN_CONTINUE;
			}
		}
	}
	
	if((nbut & IN_JUMP) && (get_entity_flags(id) & FL_ONGROUND))
	{
		jumpnum[id] = 0
		return PLUGIN_CONTINUE;
	}
	
	return PLUGIN_CONTINUE;
}

public client_PostThink(id)
{
	if(!is_user_alive(id))
	{
		return PLUGIN_CONTINUE;
	}
	
	if(get_user_flags(id) & VIP_FLAG)
	{
		if(dojump[id] == true)
		{
			new Float:velocity[3]
			entity_get_vector(id,EV_VEC_velocity, velocity)
			velocity[2] = random_float(265.0,285.0)
			entity_set_vector(id,EV_VEC_velocity, velocity)
			dojump[id] = false
			return PLUGIN_CONTINUE;
		}
	}
	
	return PLUGIN_CONTINUE;
}


 
public newRound()
        set_task(0.1, "setVip")
 
public setVip()
{
        new players[32], pNum
        get_players(players, pNum, "a")
 
        for (new i = 0; i < pNum; i++)
        {
                new id = players[i]
 
                if (get_pcvar_num(amx_adminvip) && get_user_flags(id) & VIP)
                {
 
                        message_begin(MSG_ALL, get_user_msgid("ScoreAttrib"))
                        write_byte(id)
                        write_byte(4)
                        message_end()
                }
        }
 
        return PLUGIN_HANDLED
}
